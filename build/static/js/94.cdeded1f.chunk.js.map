{"version":3,"sources":["pages/apps/Ecommerce/Customers.js"],"names":["CustomerTable","mainProps","SearchBar","Search","bootstrap4","pagination","paginationFactory","paginationOptions","paginationTotalRenderer","from","to","size","className","custom","sizePerPageRenderer","options","currSizePerPage","onSizePerPageChange","Fragment","caret","tag","type","map","option","idx","key","classNames","active","page","onClick","text","keyField","data","columns","paginationProps","paginationTableProps","search","props","md","searchProps","baseProps","striped","bordered","wrapperClasses","dataSize","customers","length","Customers","dataField","sort","formatter","cell","row","rowIndex","extraData","src","avatar","alt","classes","isDummyColumn","breadCrumbItems","label","path","title","sm","color","paginationSize","pageStartIndex","withFirstAndLast","showTotal","sizePerPageList","value"],"mappings":"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","file":"static/js/94.cdeded1f.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    Button,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n} from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory, {\r\n    PaginationProvider,\r\n    SizePerPageDropdownStandalone,\r\n    PaginationTotalStandalone,\r\n    PaginationListStandalone,\r\n} from 'react-bootstrap-table2-paginator';\r\nimport classNames from 'classnames';\r\n\r\nimport PageTitle from '../../../components/PageTitle';\r\nimport { customers } from './Data';\r\n\r\n// customer table\r\nconst CustomerTable = mainProps => {\r\n    const customTotal = (from, to, size) => (\r\n        <label className=\"react-bootstrap-table-pagination-total ml-2\">\r\n            Showing {from} to {to} of {size}\r\n        </label>\r\n    );\r\n\r\n    const sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n        <React.Fragment>\r\n            <label className=\"d-inline mr-1\">Display</label>\r\n            <UncontrolledDropdown className=\"d-inline\">\r\n                <DropdownToggle caret tag=\"button\" type=\"button\" className=\"btn btn-outline-secondary btn-sm\">\r\n                    {currSizePerPage}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {options.map((option, idx) => (\r\n                        <DropdownItem\r\n                            key={idx}\r\n                            type=\"button\"\r\n                            className={classNames({ active: currSizePerPage + '' === option.page + '' })}\r\n                            onClick={() => onSizePerPageChange(option.page)}>\r\n                            {option.text}\r\n                        </DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <label className=\"d-inline ml-1\">customers</label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const { SearchBar } = Search;\r\n\r\n    return (\r\n        <PaginationProvider\r\n            bootstrap4\r\n            pagination={paginationFactory({\r\n                ...mainProps.paginationOptions,\r\n                paginationTotalRenderer: customTotal,\r\n                custom: true,\r\n                sizePerPageRenderer: sizePerPageRenderer,\r\n            })}\r\n            keyField=\"id\"\r\n            data={mainProps.data}\r\n            columns={mainProps.columns}>\r\n            {({ paginationProps, paginationTableProps }) => (\r\n                <ToolkitProvider keyField=\"id\" data={mainProps.data} columns={mainProps.columns} search>\r\n                    {props => (\r\n                        <React.Fragment>\r\n                            <Row className=\"mt-2\">\r\n                                <Col md={6}>\r\n                                    <SizePerPageDropdownStandalone {...paginationProps} />\r\n                                </Col>\r\n                                <Col md={6} className=\"text-sm-right mt-2 mt-sm-0\">\r\n                                    Search: <SearchBar {...props.searchProps} />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                striped\r\n                                bordered={false}\r\n                                wrapperClasses=\"table-responsive\"\r\n                                {...paginationTableProps}\r\n                            />\r\n                            <Row>\r\n                                <Col>\r\n                                    <PaginationTotalStandalone {...paginationProps} dataSize={customers.length} />\r\n                                </Col>\r\n                                <Col className=\"react-bootstrap-table-pagination-list\">\r\n                                    <PaginationListStandalone {...paginationProps} />\r\n                                </Col>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            )}\r\n        </PaginationProvider>\r\n    );\r\n};\r\n\r\n// main component\r\nconst Customers = () => {\r\n    // custom column render\r\n    const NameColumn = (cell, row, rowIndex, extraData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <img src={row.avatar} alt={cell} className=\"mr-2 rounded-circle\" />\r\n                <Link to=\"/\" className=\"text-body font-weight-semibold\">\r\n                    {cell}\r\n                </Link>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const StatusColumn = (cell, row, rowIndex, extraData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span\r\n                    className={classNames('badge', {\r\n                        'badge-success-lighten': cell === 'Active',\r\n                        'badge-danger-lighten': cell === 'Blocked',\r\n                    })}>\r\n                    {cell}\r\n                </span>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const ActionColumn = (cell, row, rowIndex, extraData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-eye\"></i>\r\n                </Link>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\r\n                </Link>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-delete\"></i>\r\n                </Link>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            dataField: 'name',\r\n            text: 'Customer',\r\n            sort: true,\r\n            formatter: NameColumn,\r\n            classes: 'table-user',\r\n        },\r\n        {\r\n            dataField: 'phone',\r\n            text: 'Phone',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'email',\r\n            text: 'Email',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'location',\r\n            text: 'Location',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'created_on',\r\n            text: 'Created On',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'status',\r\n            text: 'Status',\r\n            sort: false,\r\n            formatter: StatusColumn,\r\n        },\r\n        {\r\n            dataField: 'action',\r\n            isDummyColumn: true,\r\n            text: 'Action',\r\n            sort: false,\r\n            classes: 'table-action',\r\n            formatter: ActionColumn,\r\n        },\r\n    ];\r\n\r\n    const paginationOptions = {\r\n        paginationSize: 5,\r\n        pageStartIndex: 1,\r\n        withFirstAndLast: false,\r\n        showTotal: true,\r\n        sizePerPageList: [\r\n            {\r\n                text: '10',\r\n                value: 10,\r\n            },\r\n            {\r\n                text: '25',\r\n                value: 25,\r\n            },\r\n            {\r\n                text: '50',\r\n                value: 50,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'eCommerce', path: '/apps/ecommerce/customers' },\r\n                    { label: 'Customers', path: '/apps/ecommerce/customers', active: true },\r\n                ]}\r\n                title={'Customers'}\r\n            />\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col sm={4}>\r\n                                    <Button color=\"danger\" className=\"mb-2\">\r\n                                        <i className=\"mdi mdi-plus-circle mr-2\"></i> Add Customer\r\n                                    </Button>\r\n                                </Col>\r\n\r\n                                <Col sm={8}>\r\n                                    <div className=\"text-sm-right\">\r\n                                        <Button color=\"success\" className=\"mb-2 mr-1\">\r\n                                            <i className=\"mdi mdi-settings\"></i>\r\n                                        </Button>\r\n\r\n                                        <Button color=\"light\" className=\"mb-2 mr-1\">\r\n                                            Import\r\n                                        </Button>\r\n\r\n                                        <Button color=\"light\" className=\"mb-2 mr-1\">\r\n                                            Export\r\n                                        </Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <CustomerTable data={customers} columns={columns} paginationOptions={paginationOptions} />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Customers;\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/uikit/Dropdowns.js","../node_modules/reactstrap/es/ButtonDropdown.js","../node_modules/reactstrap/es/UncontrolledButtonDropdown.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","components/PageTitle.js","../node_modules/reactstrap/es/Breadcrumb.js","../node_modules/reactstrap/es/BreadcrumbItem.js"],"names":["colors","name","color","SingleButtonDropdown","className","caret","header","disabled","divider","ColorVariantButtonDropdown","Fragment","map","index","key","SplitColorVariantButtonDropdown","direction","ButtonDropdownSizes","size","VariantButtonDropdowns","ModifiersButtonDropdowns","modifiers","setMaxHeight","enabled","order","fn","data","styles","overflow","maxHeight","Dropdowns","breadCrumbItems","label","path","active","title","lg","propTypes","children","PropTypes","node","ButtonDropdown","props","React","createElement","Dropdown","_extends","group","omitKeys","UncontrolledButtonDropdown","_Component","_this","call","this","state","isOpen","defaultOpen","toggle","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","setState","render","omit","Component","_objectSpread2","bool","_defineProperty","obj","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","PageTitle","to","item","tag","tagPropType","listTag","string","listClassName","cssModule","object","Breadcrumb","Tag","ListTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","listClasses","defaultProps","BreadcrumbItem","undefined"],"mappings":"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","file":"static/js/69.9051c05a.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    UncontrolledButtonDropdown,\r\n    Button,\r\n} from 'reactstrap';\r\n\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\nconst colors = [\r\n    {\r\n        name: 'Primary',\r\n        color: 'primary',\r\n    },\r\n    {\r\n        name: 'Secondary',\r\n        color: 'secondary',\r\n    },\r\n    {\r\n        name: 'Success',\r\n        color: 'success',\r\n    },\r\n    {\r\n        name: 'Danger',\r\n        color: 'danger',\r\n    },\r\n    {\r\n        name: 'Warning',\r\n        color: 'warning',\r\n    },\r\n    {\r\n        name: 'Info',\r\n        color: 'info',\r\n    },\r\n    {\r\n        name: 'Dark',\r\n        color: 'dark',\r\n    },\r\n];\r\n\r\nconst SingleButtonDropdown = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Single button dropdowns</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    You can use <code>UncontrolledButtonDropdown</code> to create a simple dropdown\r\n                </p>\r\n\r\n                {/* simple */}\r\n                <UncontrolledButtonDropdown>\r\n                    <DropdownToggle color=\"light\" caret>\r\n                        Dropdown\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem header>Header</DropdownItem>\r\n                        <DropdownItem disabled>Action</DropdownItem>\r\n                        <DropdownItem>Another Action</DropdownItem>\r\n                        <DropdownItem divider />\r\n                        <DropdownItem>Another Action</DropdownItem>\r\n                    </DropdownMenu>\r\n                </UncontrolledButtonDropdown>\r\n\r\n                {/* animated */}\r\n                <UncontrolledButtonDropdown className=\"ml-5\">\r\n                    <DropdownToggle color=\"secondary\" caret>\r\n                        Animated Dropdown\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"dropdown-menu-animated\">\r\n                        <DropdownItem header>Header</DropdownItem>\r\n                        <DropdownItem disabled>Action</DropdownItem>\r\n                        <DropdownItem>Another Action</DropdownItem>\r\n                        <DropdownItem divider />\r\n                        <DropdownItem>Another Action</DropdownItem>\r\n                    </DropdownMenu>\r\n                </UncontrolledButtonDropdown>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ColorVariantButtonDropdown = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"header-title\">Variant</h4>\r\n                    <p className=\"text-muted font-14 mb-3\">\r\n                        The best part is you can do this with any button variant, too:\r\n                    </p>\r\n\r\n                    {colors.map((color, index) => {\r\n                        return (\r\n                            <UncontrolledButtonDropdown key={index} className=\"mr-1\">\r\n                                <DropdownToggle caret color={color.color}>\r\n                                    {color.name}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem header>Header</DropdownItem>\r\n                                    <DropdownItem disabled>Action</DropdownItem>\r\n                                    <DropdownItem>Another Action</DropdownItem>\r\n                                    <DropdownItem divider />\r\n                                    <DropdownItem>Another Action</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledButtonDropdown>\r\n                        );\r\n                    })}\r\n                </CardBody>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst SplitColorVariantButtonDropdown = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"header-title\">Split button dropdowns</h4>\r\n                    <p className=\"text-muted font-14 mb-3\">\r\n                        You can split button dropdowns by adding <code>toggle</code> and <code>Button</code> together.\r\n                    </p>\r\n\r\n                    {colors.map((color, index) => {\r\n                        return (\r\n                            <UncontrolledButtonDropdown direction=\"down\" key={index} className=\"mr-1 mb-1\">\r\n                                <Button color={color.color}>{color.name}</Button>\r\n                                <DropdownToggle caret color={color.color}></DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem header>Header</DropdownItem>\r\n                                    <DropdownItem disabled>Action</DropdownItem>\r\n                                    <DropdownItem>Another Action</DropdownItem>\r\n                                    <DropdownItem divider />\r\n                                    <DropdownItem>Another Action</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledButtonDropdown>\r\n                        );\r\n                    })}\r\n                </CardBody>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst ButtonDropdownSizes = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"header-title\">Sizing</h4>\r\n                    <p className=\"text-muted font-14\">\r\n                        Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\r\n                    </p>\r\n\r\n                    <UncontrolledButtonDropdown size=\"lg\" className=\"mr-2\">\r\n                        <DropdownToggle color=\"light\" caret>\r\n                            Large\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n\r\n                    <UncontrolledButtonDropdown size=\"sm\">\r\n                        <DropdownToggle color=\"light\" caret>\r\n                            Small\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                </CardBody>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst VariantButtonDropdowns = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"header-title\">Drop varient</h4>\r\n\r\n                    <p className=\"text-muted font-14\">\r\n                        Trigger dropdown menus at the different direction of the elements by adding{' '}\r\n                        <code>direction</code> attribute.\r\n                    </p>\r\n\r\n                    <UncontrolledButtonDropdown direction=\"right\">\r\n                        <DropdownToggle caret>Drop right</DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                    {'  '}\r\n\r\n                    <UncontrolledButtonDropdown direction=\"up\">\r\n                        <DropdownToggle caret>Dropup</DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                    {'  '}\r\n\r\n                    <UncontrolledButtonDropdown direction=\"left\">\r\n                        <DropdownToggle caret>Drop left</DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                </CardBody>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst ModifiersButtonDropdowns = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardBody>\r\n                    <h4 className=\"header-title\">Modifiers</h4>\r\n\r\n                    <p className=\"text-muted font-14\">\r\n                        You can modify the menu rendering by overriding <code>modifiers</code>\r\n                    </p>\r\n\r\n                    <UncontrolledButtonDropdown>\r\n                        <DropdownToggle caret>Modified Dropdown Menu</DropdownToggle>\r\n                        <DropdownMenu\r\n                            modifiers={{\r\n                                setMaxHeight: {\r\n                                    enabled: true,\r\n                                    order: 890,\r\n                                    fn: data => {\r\n                                        return {\r\n                                            ...data,\r\n                                            styles: {\r\n                                                ...data.styles,\r\n                                                overflow: 'auto',\r\n                                                maxHeight: '100px',\r\n                                            },\r\n                                        };\r\n                                    },\r\n                                },\r\n                            }}>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                            <DropdownItem>Another Action</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </UncontrolledButtonDropdown>\r\n                </CardBody>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst Dropdowns = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'UI', path: '/ui/dropdowns' },\r\n                    { label: 'Base UI', path: '/ui/dropdowns' },\r\n                    { label: 'Dropdowns', path: '/ui/dropdowns', active: true },\r\n                ]}\r\n                title={'Dropdowns'}\r\n            />\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <SingleButtonDropdown />\r\n                </Col>\r\n\r\n                <Col lg={6}>\r\n                    <ColorVariantButtonDropdown />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <SplitColorVariantButtonDropdown />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <ButtonDropdownSizes />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <VariantButtonDropdowns />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <ModifiersButtonDropdowns />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Dropdowns;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  children: PropTypes.node\n};\n\nvar ButtonDropdown = function ButtonDropdown(props) {\n  return React.createElement(Dropdown, _extends({\n    group: true\n  }, props));\n};\n\nButtonDropdown.propTypes = propTypes;\nexport default ButtonDropdown;","import _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonDropdown from './ButtonDropdown';\nimport { omit } from './utils';\nvar omitKeys = ['defaultOpen'];\n\nvar UncontrolledButtonDropdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(UncontrolledButtonDropdown, _Component);\n\n  function UncontrolledButtonDropdown(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      isOpen: props.defaultOpen || false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = UncontrolledButtonDropdown.prototype;\n\n  _proto.toggle = function toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  _proto.render = function render() {\n    return React.createElement(ButtonDropdown, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, omit(this.props, omitKeys)));\n  };\n\n  return UncontrolledButtonDropdown;\n}(Component);\n\nexport { UncontrolledButtonDropdown as default };\nUncontrolledButtonDropdown.propTypes = _objectSpread2({\n  defaultOpen: PropTypes.bool\n}, ButtonDropdown.propTypes);","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: PropTypes.object,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/\">Sklejeczka</Link>\r\n                            </BreadcrumbItem>\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <BreadcrumbItem active key={index}>\r\n                                        {item.label}\r\n                                    </BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem key={index}>\r\n                                        <Link to={item.path}>{item.label}</Link>\r\n                                    </BreadcrumbItem>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  listTag: tagPropType,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nvar defaultProps = {\n  tag: 'nav',\n  listTag: 'ol',\n  'aria-label': 'breadcrumb'\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      listClassName = props.listClassName,\n      cssModule = props.cssModule,\n      children = props.children,\n      Tag = props.tag,\n      ListTag = props.listTag,\n      label = props['aria-label'],\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"]);\n\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n};\n\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      active = props.active,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"active\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n};\n\nBreadcrumbItem.propTypes = propTypes;\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;"],"sourceRoot":""}
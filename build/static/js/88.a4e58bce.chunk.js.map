{"version":3,"sources":["pages/uikit/Popovers.js","components/PageTitle.js"],"names":["Basic","className","id","type","color","placement","target","Direction","text","map","popover","i","Fragment","key","DimissibleOnClick","trigger","HoverPopover","Popovers","breadCrumbItems","label","path","active","title","xl","PageTitle","props","to","item","index"],"mappings":"oHACA,uGAKA,MAAMA,EAAQ,IAEN,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,wBAAIC,UAAU,gBAAd,kBACA,uBAAGA,UAAU,sBAAb,iJAKA,kBAAC,IAAD,CAAQC,GAAG,sBAAsBC,KAAK,SAASC,MAAM,UAArD,kBAGA,kBAAC,IAAD,CAAqBC,UAAU,QAAQC,OAAO,uBAC1C,kBAAC,IAAD,wBACA,kBAAC,IAAD,uEAOdC,EAAY,IAEV,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,wBAAIN,UAAU,gBAAd,mBACA,uBAAGA,UAAU,sBAAb,qEAEC,CACG,CACII,UAAW,MACXG,KAAM,OAEV,CACIH,UAAW,SACXG,KAAM,UAEV,CACIH,UAAW,OACXG,KAAM,QAEV,CACIH,UAAW,QACXG,KAAM,UAEZC,IAAI,CAACC,EAASC,IAER,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACjB,kBAAC,IAAD,CAAQT,GAAE,kBAAaQ,EAAQL,WAAaF,KAAK,SAASC,MAAM,UAAUH,UAAU,QAC/ES,EAAQF,MAEb,kBAAC,IAAD,CAAqBH,UAAWK,EAAQL,UAAWC,OAAM,kBAAaI,EAAQL,YAC1E,kBAAC,IAAD,KAAgBK,EAAQF,MACxB,kBAAC,IAAD,yEAU1BM,EAAoB,IAElB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,wBAAIb,UAAU,gBAAd,uBACA,uBAAGA,UAAU,sBAAb,WACY,yCADZ,yBACsD,wCADtD,iGAKA,kBAAC,IAAD,CAAQC,GAAG,uBAAuBC,KAAK,SAASC,MAAM,WAAtD,oBAGA,kBAAC,IAAD,CAAqBC,UAAU,QAAQC,OAAO,uBAAuBS,QAAQ,UACzE,kBAAC,IAAD,wBACA,kBAAC,IAAD,uEAOdC,EAAe,IAEb,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,wBAAIf,UAAU,gBAAd,SACA,uBAAGA,UAAU,sBAAb,WACY,yCADZ,yBACsD,uCADtD,6CAKA,kBAAC,IAAD,CAAQC,GAAG,uBAAuBC,KAAK,SAASC,MAAM,WAAtD,iBAGA,kBAAC,IAAD,CAAqBC,UAAU,QAAQC,OAAO,uBAAuBS,QAAQ,SACzE,kBAAC,IAAD,wBACA,kBAAC,IAAD,uEAwCLE,UAjCE,IAET,kBAAC,IAAML,SAAP,KACI,kBAAC,IAAD,CACIM,gBAAiB,CACb,CAAEC,MAAO,KAAMC,KAAM,gBACrB,CAAED,MAAO,UAAWC,KAAM,gBAC1B,CAAED,MAAO,WAAYC,KAAM,eAAgBC,QAAQ,IAEvDC,MAAO,aAGX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,GACL,kBAACvB,EAAD,OAEJ,kBAAC,IAAD,CAAKuB,GAAI,GACL,kBAAChB,EAAD,QAIR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKgB,GAAI,GACL,kBAACT,EAAD,OAEJ,kBAAC,IAAD,CAAKS,GAAI,GACL,kBAACP,EAAD,U,gCC3IpB,kEA2CeQ,IA9BIC,GAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAKxB,UAAU,kBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMyB,GAAG,KAAT,eAEHD,EAAMP,gBAAgBT,IAAI,CAACkB,EAAMC,IACvBD,EAAKN,OACR,kBAAC,IAAD,CAAgBA,QAAM,EAACR,IAAKe,GACvBD,EAAKR,OAGV,kBAAC,IAAD,CAAgBN,IAAKe,GACjB,kBAAC,IAAD,CAAMF,GAAIC,EAAKP,MAAOO,EAAKR,WAM/C,wBAAIlB,UAAU,cAAcwB,EAAMH","file":"static/js/88.a4e58bce.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Card, CardBody, UncontrolledPopover, PopoverHeader, PopoverBody, Button } from 'reactstrap';\r\n\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\nconst Basic = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Simple Popover</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Popover is a component which displays a box with a content after a click on an element - similar to\r\n                    the tooltip but can contain more content.\r\n                </p>\r\n\r\n                <Button id=\"UncontrolledPopover\" type=\"button\" color=\"danger\">\r\n                    Launch Popover\r\n                </Button>\r\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover\">\r\n                    <PopoverHeader>Title goes here</PopoverHeader>\r\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\r\n                </UncontrolledPopover>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Direction = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Four Directions</h4>\r\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\r\n\r\n                {[\r\n                    {\r\n                        placement: 'top',\r\n                        text: 'Top',\r\n                    },\r\n                    {\r\n                        placement: 'bottom',\r\n                        text: 'Bottom',\r\n                    },\r\n                    {\r\n                        placement: 'left',\r\n                        text: 'Left',\r\n                    },\r\n                    {\r\n                        placement: 'right',\r\n                        text: 'Right',\r\n                    },\r\n                ].map((popover, i) => {\r\n                    return (\r\n                        <React.Fragment key={i}>\r\n                            <Button id={`popover-${popover.placement}`} type=\"button\" color=\"primary\" className=\"mr-1\">\r\n                                {popover.text}\r\n                            </Button>\r\n                            <UncontrolledPopover placement={popover.placement} target={`popover-${popover.placement}`}>\r\n                                <PopoverHeader>{popover.text}</PopoverHeader>\r\n                                <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\r\n                            </UncontrolledPopover>\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst DimissibleOnClick = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Dismissible popover</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Use the <code>trigger</code> attribute with value <code>legacy</code> to dismiss popovers on the\r\n                    user's next click of a different element than the toggle element.\r\n                </p>\r\n\r\n                <Button id=\"UncontrolledPopover2\" type=\"button\" color=\"primary\">\r\n                    Dismiss on click\r\n                </Button>\r\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover2\" trigger=\"legacy\">\r\n                    <PopoverHeader>Title goes here</PopoverHeader>\r\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\r\n                </UncontrolledPopover>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst HoverPopover = () => {\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">Hover</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Use the <code>trigger</code> attribute with value <code>hover</code> to show popover on hovering the\r\n                    element.\r\n                </p>\r\n\r\n                <Button id=\"UncontrolledPopover3\" type=\"button\" color=\"primary\">\r\n                    Show on hover\r\n                </Button>\r\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover3\" trigger=\"hover\">\r\n                    <PopoverHeader>Title goes here</PopoverHeader>\r\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\r\n                </UncontrolledPopover>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Popovers = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'UI', path: '/ui/popovers' },\r\n                    { label: 'Base UI', path: '/ui/popovers' },\r\n                    { label: 'Popovers', path: '/ui/popovers', active: true },\r\n                ]}\r\n                title={'Popovers'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <Basic />\r\n                </Col>\r\n                <Col xl={6}>\r\n                    <Direction />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <DimissibleOnClick />\r\n                </Col>\r\n                <Col xl={6}>\r\n                    <HoverPopover />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Popovers;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: PropTypes.object,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/\">Sklejeczka</Link>\r\n                            </BreadcrumbItem>\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <BreadcrumbItem active key={index}>\r\n                                        {item.label}\r\n                                    </BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem key={index}>\r\n                                        <Link to={item.path}>{item.label}</Link>\r\n                                    </BreadcrumbItem>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"sourceRoot":""}
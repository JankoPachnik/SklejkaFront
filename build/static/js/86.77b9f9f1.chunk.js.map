{"version":3,"sources":["pages/uikit/DragDrop.js","components/PageTitle.js"],"names":["Item","color","className","classNames","title","DragDrop","Component","constructor","props","super","this","state","items","onDragEnd","bind","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","setState","render","Fragment","breadCrumbItems","label","path","active","droppableId","direction","provided","snapshot","ref","innerRef","map","key","draggableId","draggableProps","dragHandleProps","placeholder","PageTitle","to","item"],"mappings":"0NAOA,MAAMA,EAAO,EAAGC,WAER,kBAAC,IAAD,CAAMC,UAAWC,IAAW,OAAQ,OAAQ,aAAc,MAAQF,IAC9D,kBAAC,IAAD,KACI,gCAAYC,UAAU,uBAClB,oHACA,qDACsB,0BAAME,MAAM,gBAAZ,oBAuB1C,MAAMC,UAAiBC,YACnBC,YAAYC,GACRC,MAAMD,GAENE,KAAKC,MAAQ,CACTC,MAAO,IAGXF,KAAKG,UAAYH,KAAKG,UAAUC,KAAKJ,MAOzCG,UAAUE,GAEN,IAAKA,EAAOC,YACR,OAGJ,MAAMJ,EA9BE,EAACK,EAAMC,EAAYC,KAC/B,MAAMJ,EAASK,MAAMC,KAAKJ,GADkB,EAE1BF,EAAOO,OAAOJ,EAAY,GAArCK,EAFqC,oBAK5C,OAFAR,EAAOO,OAAOH,EAAU,EAAGI,GAEpBR,GAyBWS,CAAQd,KAAKC,MAAMC,MAAOG,EAAOU,OAAOC,MAAOX,EAAOC,YAAYU,OAEhFhB,KAAKiB,SAAS,CACVf,UAIRgB,SACI,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CACIC,gBAAiB,CACb,CAAEC,MAAO,KAAMC,KAAM,gBACrB,CAAED,MAAO,cAAeC,KAAM,gBAC9B,CAAED,MAAO,gBAAiBC,KAAM,eAAgBC,QAAQ,IAE5D7B,MAAO,kBAGX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAiBS,UAAWH,KAAKG,WAC7B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWqB,YAAY,YAAYC,UAAU,cACxC,CAACC,EAAUC,IACR,yBAAKC,IAAKF,EAASG,UACf,wBAAIrC,UAAU,gBAAd,gCACA,uBAAGA,UAAU,sBAAb,iCAGA,yBAAKA,UAAU,UACV,CAAC,UAAW,UAAW,OAAQ,UAAUsC,IACtC,CAACvC,EAAOyB,IACJ,kBAAC,IAAD,CACIe,IAAKxC,EACLyC,YAAazC,EACbyB,MAAOA,GACN,CAACU,EAAUC,IACR,uCACInC,UAAU,OACVoC,IAAKF,EAASG,UACVH,EAASO,eACTP,EAASQ,iBACb,kBAAC5C,EAAD,CAAMC,MAAOA,OAMhCmC,EAASS,wBAiBvDxC,a,gCC9Hf,kEA2CeyC,IA9BItC,GAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAKN,UAAU,kBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM6C,GAAG,KAAT,eAEHvC,EAAMsB,gBAAgBU,IAAI,CAACQ,EAAMtB,IACvBsB,EAAKf,OACR,kBAAC,IAAD,CAAgBA,QAAM,EAACQ,IAAKf,GACvBsB,EAAKjB,OAGV,kBAAC,IAAD,CAAgBU,IAAKf,GACjB,kBAAC,IAAD,CAAMqB,GAAIC,EAAKhB,MAAOgB,EAAKjB,WAM/C,wBAAI7B,UAAU,cAAcM,EAAMJ","file":"static/js/86.77b9f9f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, CardBody } from 'reactstrap';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport classNames from 'classnames';\r\n\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\nconst Item = ({ color }) => {\r\n    return (\r\n        <Card className={classNames('mb-0', 'mt-3', 'text-white', 'bg-' + color)}>\r\n            <CardBody>\r\n                <blockquote className=\"card-bodyquote mb-0\">\r\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>\r\n                    <footer>\r\n                        Someone famous in <cite title=\"Source Title\">Source Title</cite>\r\n                    </footer>\r\n                </blockquote>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\n/**\r\n * Reorders the list\r\n * @param {*} list\r\n * @param {*} startIndex\r\n * @param {*} endIndex\r\n */\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n// DragDrop\r\nclass DragDrop extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n        };\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    /**\r\n     * On drag ends\r\n     * @param {3} result\r\n     */\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const items = reorder(this.state.items, result.source.index, result.destination.index);\r\n\r\n        this.setState({\r\n            items,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <PageTitle\r\n                    breadCrumbItems={[\r\n                        { label: 'UI', path: '/ui/dragdrop' },\r\n                        { label: 'Extended UI', path: '/ui/dragdrop' },\r\n                        { label: 'Drag and Drop', path: '/ui/dragdrop', active: true },\r\n                    ]}\r\n                    title={'Drag and Drop'}\r\n                />\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <DragDropContext onDragEnd={this.onDragEnd}>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Card>\r\n                                        <CardBody>\r\n                                            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                                                {(provided, snapshot) => (\r\n                                                    <div ref={provided.innerRef}>\r\n                                                        <h4 className=\"header-title\">Simple Drag and Drop Example</h4>\r\n                                                        <p className=\"text-muted font-14\">\r\n                                                            Drag and drop cards in a list\r\n                                                        </p>\r\n                                                        <div className=\"d-flex\">\r\n                                                            {['primary', 'success', 'info', 'danger'].map(\r\n                                                                (color, index) => (\r\n                                                                    <Draggable\r\n                                                                        key={color}\r\n                                                                        draggableId={color}\r\n                                                                        index={index}>\r\n                                                                        {(provided, snapshot) => (\r\n                                                                            <div\r\n                                                                                className=\"mr-2\"\r\n                                                                                ref={provided.innerRef}\r\n                                                                                {...provided.draggableProps}\r\n                                                                                {...provided.dragHandleProps}>\r\n                                                                                <Item color={color} />\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </Draggable>\r\n                                                                )\r\n                                                            )}\r\n                                                            {provided.placeholder}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Droppable>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </DragDropContext>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DragDrop;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: PropTypes.object,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/\">Sklejeczka</Link>\r\n                            </BreadcrumbItem>\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <BreadcrumbItem active key={index}>\r\n                                        {item.label}\r\n                                    </BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem key={index}>\r\n                                        <Link to={item.path}>{item.label}</Link>\r\n                                    </BreadcrumbItem>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"sourceRoot":""}
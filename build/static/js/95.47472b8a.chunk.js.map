{"version":3,"sources":["pages/apps/Ecommerce/Products.js"],"names":["TableWithSeletableRows","mainProps","SearchBar","Search","bootstrap4","pagination","paginationFactory","paginationOptions","paginationTotalRenderer","from","to","size","className","custom","sizePerPageRenderer","options","currSizePerPage","onSizePerPageChange","Fragment","caret","tag","type","map","option","idx","key","classNames","active","page","onClick","text","keyField","data","columns","paginationProps","paginationTableProps","search","props","md","searchProps","baseProps","bordered","headerClasses","wrapperClasses","dataSize","products","length","Products","dataField","sort","formatter","cell","row","rowIndex","extraData","rating","emptyStars","src","image","alt","name","title","height","Array","x","i","headerAttrs","column","colIndex","width","status","isDummyColumn","classes","breadCrumbItems","label","path","sm","color","paginationSize","pageStartIndex","withFirstAndLast","showTotal","sizePerPageList","value"],"mappings":"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","file":"static/js/95.47472b8a.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    Button,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n} from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory, {\r\n    PaginationProvider,\r\n    SizePerPageDropdownStandalone,\r\n    PaginationTotalStandalone,\r\n    PaginationListStandalone,\r\n} from 'react-bootstrap-table2-paginator';\r\nimport classNames from 'classnames';\r\n\r\nimport PageTitle from '../../../components/PageTitle';\r\nimport { products } from './Data';\r\n\r\n// the table with selectable records\r\nconst TableWithSeletableRows = mainProps => {\r\n    const customTotal = (from, to, size) => (\r\n        <label className=\"react-bootstrap-table-pagination-total ml-2\">\r\n            Showing {from} to {to} of {size}\r\n        </label>\r\n    );\r\n\r\n    const sizePerPageRenderer = ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n        <React.Fragment>\r\n            <label className=\"d-inline mr-1\">Display</label>\r\n            <UncontrolledDropdown className=\"d-inline\">\r\n                <DropdownToggle caret tag=\"button\" type=\"button\" className=\"btn btn-outline-secondary btn-sm\">\r\n                    {currSizePerPage}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {options.map((option, idx) => (\r\n                        <DropdownItem\r\n                            key={idx}\r\n                            type=\"button\"\r\n                            className={classNames({ active: currSizePerPage + '' === option.page + '' })}\r\n                            onClick={() => onSizePerPageChange(option.page)}>\r\n                            {option.text}\r\n                        </DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <label className=\"d-inline ml-1\">products</label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const { SearchBar } = Search;\r\n\r\n    return (\r\n        <PaginationProvider\r\n            bootstrap4\r\n            pagination={paginationFactory({\r\n                ...mainProps.paginationOptions,\r\n                paginationTotalRenderer: customTotal,\r\n                custom: true,\r\n                sizePerPageRenderer: sizePerPageRenderer,\r\n            })}\r\n            keyField=\"id\"\r\n            data={mainProps.data}\r\n            columns={mainProps.columns}>\r\n            {({ paginationProps, paginationTableProps }) => (\r\n                <ToolkitProvider keyField=\"id\" data={mainProps.data} columns={mainProps.columns} search>\r\n                    {props => (\r\n                        <React.Fragment>\r\n                            <Row className=\"mt-2\">\r\n                                <Col md={6}>\r\n                                    <SizePerPageDropdownStandalone {...paginationProps} />\r\n                                </Col>\r\n                                <Col md={6} className=\"text-sm-right mt-2 mt-sm-0\">\r\n                                    Search: <SearchBar {...props.searchProps} />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <BootstrapTable\r\n                                {...props.baseProps}\r\n                                bordered={false}\r\n                                headerClasses=\"thead-light\"\r\n                                wrapperClasses=\"table-responsive\"\r\n                                {...paginationTableProps}\r\n                            />\r\n                            <Row>\r\n                                <Col>\r\n                                    <PaginationTotalStandalone {...paginationProps} dataSize={products.length} />\r\n                                </Col>\r\n                                <Col className=\"react-bootstrap-table-pagination-list\">\r\n                                    <PaginationListStandalone {...paginationProps} />\r\n                                </Col>\r\n                            </Row>\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            )}\r\n        </PaginationProvider>\r\n    );\r\n};\r\n\r\n// main component\r\nconst Products = () => {\r\n    // custom column render\r\n    const ProductColumn = (cell, row, rowIndex, extraData) => {\r\n        const rating = row.rating;\r\n        const emptyStars = rating < 5 ? 5 - rating : 0;\r\n        return (\r\n            <React.Fragment>\r\n                <img src={row.image} alt={row.name} title={row.name} className=\"rounded mr-3\" height=\"48\" />\r\n                <p className=\"m-0 d-inline-block align-middle font-16\">\r\n                    <Link to=\"/\" className=\"text-body\">\r\n                        {row.name}\r\n                    </Link>\r\n                    <br />\r\n                    {[...Array(rating)].map((x, i) => (\r\n                        <span key={i} className=\"text-warning mdi mdi-star\"></span>\r\n                    ))}\r\n                    {[...Array(emptyStars)].map((x, i) => (\r\n                        <span key={i} className=\"text-warning mdi mdi-star-outline\"></span>\r\n                    ))}\r\n                </p>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const StatusColumn = (cell, row, rowIndex, extraData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <span className={classNames('badge', { 'badge-success': row.status, 'badge-danger': !row.status })}>\r\n                    {row.status ? 'Active' : 'Deactivated'}\r\n                </span>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const ActionColumn = (cell, row, rowIndex, extraData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-eye\"></i>\r\n                </Link>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\r\n                </Link>\r\n                <Link to=\"/\" className=\"action-icon\">\r\n                    {' '}\r\n                    <i className=\"mdi mdi-delete\"></i>\r\n                </Link>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            dataField: 'name',\r\n            text: 'Product',\r\n            sort: true,\r\n            formatter: ProductColumn,\r\n            headerAttrs: (column, colIndex) => ({ width: '25%' }),\r\n        },\r\n        {\r\n            dataField: 'category',\r\n            text: 'Category',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'added_date',\r\n            text: 'Added Date',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'price',\r\n            text: 'Price',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'quantity',\r\n            text: 'Quantity',\r\n            sort: false,\r\n        },\r\n        {\r\n            dataField: 'status',\r\n            text: 'Status',\r\n            sort: false,\r\n            formatter: StatusColumn,\r\n        },\r\n        {\r\n            dataField: 'action',\r\n            isDummyColumn: true,\r\n            text: 'Action',\r\n            sort: false,\r\n            classes: 'table-action',\r\n            formatter: ActionColumn,\r\n        },\r\n    ];\r\n\r\n    const paginationOptions = {\r\n        paginationSize: 5,\r\n        pageStartIndex: 1,\r\n        withFirstAndLast: false,\r\n        showTotal: true,\r\n        sizePerPageList: [\r\n            {\r\n                text: '5',\r\n                value: 5,\r\n            },\r\n            {\r\n                text: '10',\r\n                value: 10,\r\n            },\r\n            {\r\n                text: '25',\r\n                value: 25,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'eCommerce', path: '/apps/ecommerce/products' },\r\n                    { label: 'Products', path: '/apps/ecommerce', active: true },\r\n                ]}\r\n                title={'Products'}\r\n            />\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row>\r\n                                <Col sm={4}>\r\n                                    <Button color=\"danger\" className=\"mb-2\">\r\n                                        <i className=\"mdi mdi-plus-circle mr-2\"></i> Add Product\r\n                                    </Button>\r\n                                </Col>\r\n\r\n                                <Col sm={8}>\r\n                                    <div className=\"text-sm-right\">\r\n                                        <Button color=\"success\" className=\"mb-2 mr-1\">\r\n                                            <i className=\"mdi mdi-settings\"></i>\r\n                                        </Button>\r\n\r\n                                        <Button color=\"light\" className=\"mb-2 mr-1\">\r\n                                            Import\r\n                                        </Button>\r\n\r\n                                        <Button color=\"light\" className=\"mb-2 mr-1\">\r\n                                            Export\r\n                                        </Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TableWithSeletableRows\r\n                                data={products}\r\n                                columns={columns}\r\n                                paginationOptions={paginationOptions}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n"],"sourceRoot":""}
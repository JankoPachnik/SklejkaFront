{"version":3,"sources":["pages/forms/FileUpload.js","components/FileUploader.js","components/PageTitle.js"],"names":["FileUpload","Fragment","breadCrumbItems","label","path","active","title","className","onFileUpload","files","console","log","FileUploader","Component","constructor","props","super","handleAcceptedFiles","allFiles","this","showPreview","map","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","formatBytes","size","state","selectedFiles","push","setState","bytes","decimals","dm","i","Math","floor","parseFloat","pow","toFixed","bind","render","onDrop","acceptedFiles","getRootProps","getInputProps","id","f","key","data-dz-thumbnail","alt","name","src","type","to","defaultProps","PageTitle","item","index"],"mappings":"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","file":"static/js/78.58459bc3.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Card, CardBody } from 'reactstrap';\r\n\r\nimport PageTitle from '../../components/PageTitle';\r\nimport FileUploader from '../../components/FileUploader';\r\n\r\nconst FileUpload = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Forms', path: '/forms/upload' },\r\n                    { label: 'Form Upload', path: '/forms/upload', active: true },\r\n                ]}\r\n                title={'Form Upload'}\r\n            />\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\r\n\r\n                            <p className=\"text-muted font-13 m-b-30\">\r\n                                DropzoneJS is an open source library that provides drag’n’drop file uploads with image\r\n                                previews.\r\n                            </p>\r\n\r\n                            <FileUploader\r\n                                onFileUpload={files => {\r\n                                    console.log(files);\r\n                                }}\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n","// @flow\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Card } from 'reactstrap';\r\nimport Dropzone from 'react-dropzone';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype FileUploaderProps = {\r\n    onFileUpload?: PropTypes.func,\r\n    showPreview?: boolean,\r\n};\r\n\r\ntype FileUploaderState = {\r\n    selectedFiles: Array<PropTypes.object>,\r\n};\r\n\r\nclass FileUploader extends Component<FileUploaderProps, FileUploaderState> {\r\n    static defaultProps = {\r\n        showPreview: true,\r\n    };\r\n\r\n    constructor(props: FileUploaderProps) {\r\n        super(props);\r\n        this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\r\n\r\n        this.state = {\r\n            selectedFiles: [],\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handled the accepted files and shows the preview\r\n     */\r\n    handleAcceptedFiles = (files: Array<PropTypes.object>) => {\r\n        var allFiles = files;\r\n\r\n        if (this.props.showPreview) {\r\n            files.map(file =>\r\n                Object.assign(file, {\r\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\r\n                    formattedSize: this.formatBytes(file.size),\r\n                })\r\n            );\r\n\r\n            allFiles = this.state.selectedFiles;\r\n            allFiles.push(...files);\r\n            this.setState({ selectedFiles: allFiles });\r\n        }\r\n\r\n        if (this.props.onFileUpload) this.props.onFileUpload(allFiles);\r\n    };\r\n\r\n    /**\r\n     * Formats the size\r\n     */\r\n    formatBytes = (bytes: number, decimals: number = 2) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const dm = decimals < 0 ? 0 : decimals;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Dropzone onDrop={acceptedFiles => this.handleAcceptedFiles(acceptedFiles)} {...this.props}>\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <div className=\"dropzone\">\r\n                            <div className=\"dz-message needsclick\" {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <i className=\"h1 text-muted dripicons-cloud-upload\"></i>\r\n                                <h5>Drop files here or click to upload.</h5>\r\n                                <span className=\"text-muted font-13\">\r\n                                    (This is just a demo dropzone. Selected files are <strong>not</strong> actually\r\n                                    uploaded.)\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Dropzone>\r\n\r\n                {this.props.showPreview && (\r\n                    <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\r\n                        {this.state.selectedFiles.map((f, i) => {\r\n                            return (\r\n                                <Card\r\n                                    className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\r\n                                    key={i + '-file'}>\r\n                                    <div className=\"p-2\">\r\n                                        <Row className=\"align-items-center\">\r\n                                            {f.preview && (\r\n                                                <Col className=\"col-auto\">\r\n                                                    <img\r\n                                                        data-dz-thumbnail=\"\"\r\n                                                        className=\"avatar-sm rounded bg-light\"\r\n                                                        alt={f.name}\r\n                                                        src={f.preview}\r\n                                                    />\r\n                                                </Col>\r\n                                            )}\r\n                                            {!f.preview && (\r\n                                                <Col className=\"col-auto\">\r\n                                                    <div className=\"avatar-sm\">\r\n                                                        <span className=\"avatar-title bg-primary rounded\">\r\n                                                            {f.type.split('/')[0]}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            )}\r\n                                            <Col className=\"pl-0\">\r\n                                                <Link to=\"#\" className=\"text-muted font-weight-bold\">\r\n                                                    {f.name}\r\n                                                </Link>\r\n                                                <p className=\"mb-0\">\r\n                                                    <strong>{f.formattedSize}</strong>\r\n                                                </p>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </Card>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileUploader;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: PropTypes.object,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/\">Sklejeczka</Link>\r\n                            </BreadcrumbItem>\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <BreadcrumbItem active key={index}>\r\n                                        {item.label}\r\n                                    </BreadcrumbItem>\r\n                                ) : (\r\n                                    <BreadcrumbItem key={index}>\r\n                                        <Link to={item.path}>{item.label}</Link>\r\n                                    </BreadcrumbItem>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"sourceRoot":""}